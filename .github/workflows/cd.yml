# This is a basic workflow to help you get started with Actions

name: CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Lint code
        run: echo "Linting repository!"

      # Runs a set of commands using the runners shell
      - name: Run unit tests
        run: |
          echo "Running unit tests"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build,tag, and push PHP image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: aprasad-docker-demo
        run: |
          #Build Images
          docker compose build
          #Tag Images
          docker tag php-7.3-fpm:latest $ECR_REGISTRY/$ECR_REPOSITORY:php
          docker tag nginx:1.12.0-alpine $ECR_REGISTRY/$ECR_REPOSITORY:nginx
          
          #docker tag apache/couchdb:3.1.2 $ECR_REGISTRY/$ECR_REPOSITORY:couchdb
          #docker tag react-node-16-13:latest $ECR_REGISTRY/$ECR_REPOSITORY:react
          
          #Push Images
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:php
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:nginx
          #docker push $ECR_REGISTRY/$ECR_REPOSITORY:couchdb
          #docker push $ECR_REGISTRY/$ECR_REPOSITORY:react
          
          echo "::set-output name=image-php::$ECR_REGISTRY/$ECR_REPOSITORY:php"
          echo "::set-output name=image-nginx::$ECR_REGISTRY/$ECR_REPOSITORY:nginx"
          #echo "::set-output name=image-couchdb::$ECR_REGISTRY/$ECR_REPOSITORY:couchdb"
          #echo "::set-output name=image-react::$ECR_REGISTRY/$ECR_REPOSITORY:react"

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_CONTAINER_DEFINITION }} \
          --query taskDefinition > task-definition.json

      - name: Fill in the PHP image ID in the Amazon ECS task definition
        id: task-def-php
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ secrets.ECS_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image-php }}

      - name: Fill in the Nginx image ID in the Amazon ECS task definition
        id: task-def-nginx
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ secrets.ECS_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image-nginx }}

      #- name: Fill in the CouchDB image ID in the Amazon ECS task definition
      #  id: task-def-couchdb
      #  uses: aws-actions/amazon-ecs-render-task-definition@v1
      #  with:
      #    task-definition: task-definition.json
      #    container-name: ${{ secrets.ECS_CONTAINER_NAME }}
      #    image: ${{ steps.build-image.outputs.image-couchdb }}

      #- name: Fill in the React image ID in the Amazon ECS task definition
      #  id: task-def-react
      #  uses: aws-actions/amazon-ecs-render-task-definition@v1
      #  with:
      #    task-definition: task-definition.json
      #    container-name: ${{ secrets.ECS_CONTAINER_NAME }}
      #    image: ${{ steps.build-image.outputs.image-react }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true